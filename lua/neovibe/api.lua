local api = {}
local http = require("plenary.curl")
local json = vim.json
local models = require("neovibe.models")
local append_message = require("neovibe.common").append_message

local message_history = {}
local system_prompt =
[[
You are an AI that is supposed to set, modify, and evaluate lua commands
in the latest Neovim version.
Essentially a prompt converter that converts prompts into lua commands
The input is expected to be a prompt that requests a setting, option, or a command that modifies a
Neovim configuration

Responses should be in just in the Lua programming language, do not provide Vimscript or VimL Responses
You are not limited to only 1 line of code. You can have multiple lines of code to change settings in just 1 response.
Try to avoid writing code that blocks the main thread. If you know the function has a potential to block the main thread,
have it delegate to a different thread

Do not make use deprecated API functions. Do not make up API functions on your own unless provided by the user.
Do not explain your code in plaintext, only output in VALID lua code that uses the Neovim API. Do not use markdown in your response
You are allowed to add comments to the code, but not in plaintext
]]

-- Generated by copilot
-- This is temporary for testing, if its good, then i'm gonna make it permanent
system_prompt = "You are an AI that converts natural language Neovim configuration prompts into valid Lua code. Input prompts specify settings, options, or commands for Neovim. Your output must be pure Lua (multi‐line allowed) using the Neovim API with inline comments only—no Vimscript/VimL, plaintext explanations, or markdown. Ensure non‐blocking behavior by offloading potentially blocking calls, and avoid deprecated or fabricated API functions."

-- Initial system prompt
table.insert(message_history, {
    role = "system",
    content = system_prompt
})

function api.history()
    return message_history
end

function api.request(ctx, prompt)
    append_message(message_history, "user", prompt)

    local request = models[ctx.model].parse_request(ctx, message_history)
    local status, response = pcall(http.post, request)

    -- Http -- Client errors
    if not status then
        vim.notify("Http client error: " .. response, vim.log.levels.ERROR)

        return {
            status = 1,
            error = response
        }
    end

    -- Expect syntax errors
    local result, error = models[ctx.model].parse_response(response)

    if not result then
        return {
            func = nil,
            status = 1,
            error = error
        }
    end

    return {
        func = result, -- Will be nil if status not 200
        status = 200, -- Error code; 200 is ok
        error = nil, -- Table / string
    }
end

return api
